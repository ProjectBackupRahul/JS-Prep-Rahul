One of the best solutions that Node.js provides is to divide a single process into several sub-processes,
 called workers. Therefore, through a Cluster module , these complex processes can be divided into smaller, simpler processes,
 significantly speeding up the applications in Node .

 In the first example, set up a small server that responds to incoming requests by returning the ID of the worker process that handled your request.

The parent process, in this case, will consist of 4 child processes.

Here is the sample code that implements this use case:

var cluster = require('cluster');
var http = require('http');
var numCPUs = 4;

if (cluster.isMaster) {
 for (var i = 0; i < numCPUs; i++) {
  cluster.fork();
 }
} else {
 http.createServer(function(req, res) {
  res.writeHead(200);
  res.end('process ' + process.pid + ' says hello!');
 }).listen(8000);
}