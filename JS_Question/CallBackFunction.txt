Defination :

A callback function is a function passed into another function as an argument, 
which is then invoked inside the outer function to complete some kind of routine
 or action.

Example : 

function uName(name) {
    console.log(name);
  }
  
  function processUserInput(callback) {
    const name = "my Name"
    callback(name);
  }
  
  processUserInput(uName);

  Callback Hell: 

  What is callback hell?
This is a big issue caused by coding with complex nested callbacks. Here, 
each and every callback takes an argument that is a result of the previous callbacks.
 In this manner, The code structure looks like a pyramid, making it difficult to read and maintain.
  Also, if there is an error in one function, then all other functions get affected.

  How to escape from a callback hell?

JavaScript provides an easy way of escaping from a callback hell. This is done by event queue and promises.

A promise is a returned object from any asynchronous function,
 to which callback methods can be added based on the previous function’s result.

Promises use .then() method to call async callbacks. 
We can chain as many callbacks as we want and the order is also strictly maintained.

Promises use .fetch() method to fetch an object from the network. 
It also uses .catch() method to catch any exception when any block fails.

So these promises are put in event queue so that they don’t block subsequent JS code. 
Also once the results are returned, the event queue finishes its operations.

There are also other helpful keywords and methods like async, wait, settimeout() to simplify and make better use of callbacks.


