

JavaScript has a variety of data types, each serving different purposes for managing data in your programs. Understanding these data types is fundamental for effective JavaScript programming.

Basic Data Types
JavaScript's basic data types are divided into two categories: primitive types and reference types.

Primitive Types
Number

Represents both integer and floating-point numbers.
Example: 42, 3.14
Special numeric values: Infinity, -Infinity, and NaN (Not a Number).
javascript
Copy code
let int = 42;
let float = 3.14;
let inf = Infinity;
let notANumber = NaN;
String

Represents a sequence of characters.
Can be enclosed in single quotes ('), double quotes ("), or backticks (` for template literals).
javascript
Copy code
let singleQuote = 'Hello';
let doubleQuote = "World";
let templateLiteral = `Hello, ${doubleQuote}!`;
Boolean

Represents logical values: true or false.
javascript
Copy code
let isTrue = true;
let isFalse = false;
Undefined

Represents an uninitialized variable or a variable that has not been assigned a value.
javascript
Copy code
let undefinedVar;
console.log(undefinedVar); // undefined
Null

Represents the intentional absence of any object value.
Itâ€™s an empty or non-existent value.
javascript
Copy code
let nullVar = null;
Symbol

Represents a unique and immutable value used as the key for object properties.
javascript
Copy code
let sym1 = Symbol('description');
let sym2 = Symbol('description');
console.log(sym1 === sym2); // false
BigInt

Represents integers with arbitrary precision.
Useful for large integers beyond the safe integer range for Number type.
javascript
Copy code
let bigInt = 123456789012345678901234567890n;
Example of Primitive Types
javascript
Copy code
let number = 100;
let string = "Hello";
let boolean = true;
let undefinedValue;
let nullValue = null;
let symbolValue = Symbol('unique');
let bigIntValue = 9007199254740991n;
Reference Types
Reference types include objects, arrays, and functions, among others. They are more complex and can hold multiple values or properties.

Object

A collection of key-value pairs where the key is a string or Symbol, and the value can be any data type.
javascript
Copy code
let obj = {
  name: 'Alice',
  age: 30
};
Array

An ordered collection of values (elements) that can be of any data type.
javascript
Copy code
let arr = [1, 'two', true, { key: 'value' }];
Function

A block of code designed to perform a particular task, which can be invoked or called.
javascript
Copy code
function greet(name) {
  return `Hello, ${name}`;
}
Date

Represents a single moment in time in a platform-independent format.
javascript
Copy code
let now = new Date();
RegExp

Represents regular expressions, which are patterns used to match character combinations in strings.
javascript
Copy code
let regex = /ab+c/;
Map

A collection of keyed data items, like an object, but allows any type of key.
javascript
Copy code
let map = new Map();
map.set('key', 'value');
Set

A collection of unique values, similar to an array but with no duplicate elements.
javascript
Copy code
let set = new Set();
set.add(1);
set.add(2);
Example of Reference Types
javascript
Copy code
let person = {
  name: 'John',
  age: 25
};

let numbers = [1, 2, 3, 4];

function add(a, b) {
  return a + b;
}

let currentDate = new Date();

let regexPattern = /abc/;

let mapExample = new Map();
mapExample.set('key1', 'value1');

let setExample = new Set([1, 2, 3]);
Type Checking
You can check the type of a variable using the typeof operator and instanceof for reference types.

javascript
Copy code
console.log(typeof 42); // "number"
console.log(typeof 'Hello'); // "string"
console.log(typeof true); // "boolean"
console.log(typeof undefined); // "undefined"
console.log(typeof null); // "object" (this is a known quirk)
console.log(typeof Symbol('sym')); // "symbol"
console.log(typeof 123456789012345678901234567890n); // "bigint"

console.log(typeof []); // "object"
console.log(typeof {}); // "object"
console.log(typeof function() {}); // "function"

console.log([] instanceof Array); // true
console.log({} instanceof Object); // true
console.log(new Date() instanceof Date); // true
Special Considerations
Type Coercion: JavaScript performs automatic type conversion, which can lead to unexpected behavior.

javascript
Copy code
console.log(1 + '2'); // "12"
console.log('5' - 2); // 3
Falsy Values: false, 0, "" (empty string), null, undefined, and NaN are considered falsy.

javascript
Copy code
if (0) {
  console.log('This will not run');
}
Object Wrappers: JavaScript provides wrapper objects for primitive types (Number, String, Boolean), but they are usually automatically created and not often manually used.

javascript
Copy code
let numObj = new Number(42);
Summary
Primitive Types: Number, String, Boolean, Undefined, Null, Symbol, BigInt.
Reference Types: Object, Array, Function, Date, RegExp, Map, Set.
Type Checking: Use typeof and instanceof to check variable types.
Special Considerations: Be mindful of type coercion, falsy values, and object wrappers.
Understanding these data types and how to work with them is crucial for effective JavaScript programming and handling data efficiently in your applications.