map, reduce, and filter are three of the most powerful and commonly used array methods in JavaScript. They provide a functional approach to transforming and processing arrays.
 Hereâ€™s an in-depth look at each:

map
The map method creates a new array populated with the results of calling a provided function on every element
 in the calling array.

Syntax:

javascript
Copy code
const newArray = array.map(callback(currentValue[, index[, array]])[, thisArg])
Example:

javascript
Copy code
const numbers = [1, 2, 3, 4];
const squared = numbers.map(num => num * num);
console.log(squared); // [1, 4, 9, 16]
Explanation:

map applies the function (num => num * num) to each element in numbers.
Returns a new array squared with the squared values.

filter
The filter method creates a new array with all elements that pass the test implemented by the provided function.

Syntax:

javascript
Copy code
const newArray = array.filter(callback(element[, index[, array]])[, thisArg])
Example:

javascript
Copy code
const numbers = [1, 2, 3, 4];
const evens = numbers.filter(num => num % 2 === 0);
console.log(evens); // [2, 4]
Explanation:

filter applies the function (num => num % 2 === 0) to each element.
Returns a new array evens containing only the elements that are even.
reduce
The reduce method executes a reducer function on each element of the array, resulting in a single output value.

Syntax:

javascript
Copy code
const result = array.reduce(callback(accumulator, currentValue[, index[, array]])[, initialValue])
Example:

javascript
Copy code
const numbers = [1, 2, 3, 4];
const sum = numbers.reduce((acc, num) => acc + num, 0);
console.log(sum); // 10
Explanation:

reduce applies the function (acc, num => acc + num) to each element, accumulating the sum.
0 is the initial value of the accumulator.
Returns a single value 10, the sum of the array.
Combining map, filter, and reduce
These methods can be combined to perform complex transformations and calculations in a concise manner.

Example:

javascript
Copy code
const numbers = [1, 2, 3, 4, 5, 6];
const sumOfSquaresOfEvens = numbers
    .filter(num => num % 2 === 0)
    .map(num => num * num)
    .reduce((acc, num) => acc + num, 0);

console.log(sumOfSquaresOfEvens); // 56